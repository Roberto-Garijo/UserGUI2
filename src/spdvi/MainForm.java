/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package spdvi;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.EOFException;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JList;

/**
 *
 * @author merce
 */
public class MainForm extends javax.swing.JFrame {

    ArrayList<User> users = new ArrayList<>();
    ArrayList<File> deletedUsers = new ArrayList<>();

    FileWriter fw;
    BufferedReader br;

    File filename = new File("Users.csv");
    private JList<User> lstUsers;
    JFileChooser fileChooser;
    private String imagePath = null;
    
    boolean exiting = false;

    public MainForm() {
        initComponents();
        if (filename.exists()) {
            loadUsers();
        }
        lstUsers = new JList<>();
        jScrollPane1.setViewportView(lstUsers);
        lstUsers.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lstUsersValueChanged(evt);
            }
        });
        if (filename.exists()) {
            UpdateUsersListView();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnGGenre = new javax.swing.ButtonGroup();
        lblId = new javax.swing.JLabel();
        txtId = new javax.swing.JTextField();
        lblFirstName = new javax.swing.JLabel();
        txtFirstName = new javax.swing.JTextField();
        lblLastName = new javax.swing.JLabel();
        txtLastName = new javax.swing.JTextField();
        lblBirthDate = new javax.swing.JLabel();
        txtBirthDate = new javax.swing.JTextField();
        radMale = new javax.swing.JRadioButton();
        radFemale = new javax.swing.JRadioButton();
        radOther = new javax.swing.JRadioButton();
        txtOther = new javax.swing.JTextField();
        chkAlive = new javax.swing.JCheckBox();
        btnInsert = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        btnLoadList = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        lblImage = new javax.swing.JLabel();
        btnImage = new javax.swing.JButton();
        mnuBar = new javax.swing.JMenuBar();
        mnuCRUD = new javax.swing.JMenu();
        mniCreate = new javax.swing.JMenuItem();
        mniRead = new javax.swing.JMenuItem();
        mniUpdate = new javax.swing.JMenuItem();
        mniDelete = new javax.swing.JMenuItem();
        mniExit = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        lblId.setText("ID");

        txtId.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtIdKeyReleased(evt);
            }
        });

        lblFirstName.setText("First Name");

        lblLastName.setText("Last Name");

        lblBirthDate.setText("Birth Date");

        btnGGenre.add(radMale);
        radMale.setText("Male");

        btnGGenre.add(radFemale);
        radFemale.setText("Female");

        btnGGenre.add(radOther);
        radOther.setText("Other");

        chkAlive.setText("Alive");

        btnInsert.setText("Insert");
        btnInsert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInsertActionPerformed(evt);
            }
        });

        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnLoadList.setText("Load List");
        btnLoadList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadListActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnImage.setText("Insert image");
        btnImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImageActionPerformed(evt);
            }
        });

        mnuCRUD.setText("CRUD");

        mniCreate.setText("Create");
        mniCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniCreateActionPerformed(evt);
            }
        });
        mnuCRUD.add(mniCreate);

        mniRead.setText("Read");
        mniRead.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniReadActionPerformed(evt);
            }
        });
        mnuCRUD.add(mniRead);

        mniUpdate.setText("Update");
        mniUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniUpdateActionPerformed(evt);
            }
        });
        mnuCRUD.add(mniUpdate);

        mniDelete.setText("Delete");
        mniDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniDeleteActionPerformed(evt);
            }
        });
        mnuCRUD.add(mniDelete);

        mniExit.setText("Exit");
        mniExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniExitActionPerformed(evt);
            }
        });
        mnuCRUD.add(mniExit);

        mnuBar.add(mnuCRUD);

        setJMenuBar(mnuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnInsert, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(btnLoadList, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 521, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(32, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblFirstName)
                                    .addComponent(lblId, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(txtId, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 92, Short.MAX_VALUE)
                                    .addComponent(txtFirstName, javax.swing.GroupLayout.Alignment.LEADING)))
                            .addComponent(chkAlive, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(radMale, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(radFemale, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(radOther, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtOther, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(lblLastName, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(9, 9, 9))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblBirthDate, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(5, 5, 5)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(txtBirthDate, javax.swing.GroupLayout.DEFAULT_SIZE, 92, Short.MAX_VALUE)
                                    .addComponent(txtLastName))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnImage, javax.swing.GroupLayout.DEFAULT_SIZE, 101, Short.MAX_VALUE)
                            .addComponent(lblImage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(64, 64, 64))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblId)
                            .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblFirstName)
                            .addComponent(txtFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblLastName)
                            .addComponent(txtLastName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblBirthDate)
                            .addComponent(txtBirthDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(radMale)
                            .addComponent(radFemale)
                            .addComponent(radOther)
                            .addComponent(txtOther, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                        .addComponent(chkAlive))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(lblImage, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnImage)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(26, 26, 26)
                .addComponent(btnInsert)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnLoadList, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnUpdate)
                        .addComponent(btnDelete)
                        .addComponent(btnSave)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void lstUsersValueChanged(javax.swing.event.ListSelectionEvent evt) {
        User selectedUser = lstUsers.getSelectedValue();
        if (selectedUser != null) {
            for (User u : users) {
                if (u.getId() == selectedUser.getId()) {
                    txtId.setText(String.valueOf(u.getId()));
                    txtFirstName.setText(u.getFirstName());
                    txtLastName.setText(u.getLastName());

                    String formattedDate = String.valueOf(u.getbirthDate());
                    txtBirthDate.setText(formattedDate);
                    if ("Male".equals(u.getGenre())) {
                        radMale.setSelected(true);
                    } else if ("Female".equals(u.getGenre())) {
                        radFemale.setSelected(true);
                    } else {
                        radOther.setSelected(true);
                        txtOther.setText(u.getGenre());
                    }
                    if (u.getLifeStatus().equals("Alive")) {
                        chkAlive.setSelected(true);
                    } else {
                        chkAlive.setSelected(false);
                    }
                    try {
                        BufferedImage selectedImage;
                        if (u.getProfile() != null) {
                            selectedImage = ImageIO.read(new File(u.getProfile()));
                            lblImage.setIcon(resizImageIcon(selectedImage));
                        }
                    } catch (IOException ioe) {
                        System.err.println("Error en la selecion");
                        System.err.println(ioe);
                    }
                }
            }
        }
    }

    private void btnInsertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInsertActionPerformed
        try {
            String genre = "";
            if (radFemale.isSelected()) {
                genre = "Female";
            }
            if (radMale.isSelected()) {
                genre = "Male";
            }
            if (radOther.isSelected()) {
                genre = txtOther.getText();
            }

            LocalDate birthDate = LocalDate.parse(txtBirthDate.getText(), DateTimeFormatter.ofPattern("yyyy-MM-dd"));

            if (imagePath == null) {
                imagePath = "src/spdvi/image/guest.png";
            }

            User u = new User(Integer.parseInt(txtId.getText()), txtLastName.getText(), txtFirstName.getText(), birthDate, genre, chkAlive.isSelected() ? "Alive" : "Dead", imagePath);
            users.add(u);

            UpdateUsersListView();

        } catch (NumberFormatException | DateTimeParseException nfe) {
            ExceptionDialog e = new ExceptionDialog(this, true);
            e.setVisible(true);
        }

    }//GEN-LAST:event_btnInsertActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        ConfirmDialog r = new ConfirmDialog(this, true);
        String userFolder = System.getProperty("user.home");
        if(!exiting) {  
            r.setVisible(true);
        }

        if (r.action || exiting) {
            try {
                fw = new FileWriter(filename);
                for (User u : users) {
                    String absolutePath = userFolder + "\\AppData\\Local\\UserList2\\images\\User" + u.getId() + ".jpg";
                    BufferedImage bufferedImage = ImageIO.read(new File(u.getProfile()));
                    u.setProfile("User" + u.getId() + ".jpg");
                    File outputImage = new File(absolutePath);
                    ImageIO.write(bufferedImage, "jpg", outputImage);
                    File folder = new File(userFolder + "\\AppData\\Local\\UserList2\\images");
                    findAllFilesInFolder(folder);
                    fw.write(u.toFile());
                }
                fw.close();
            } catch (IOException ioe) {
                ioe.printStackTrace();
            }
        } else {
            return;
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        if (filename.exists()) {
            btnLoadList.doClick();
        }
    }//GEN-LAST:event_formWindowOpened

    private void btnLoadListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadListActionPerformed
        users.clear();
        loadUsers();
        UpdateUsersListView();
    }//GEN-LAST:event_btnLoadListActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        User selectedUser = lstUsers.getSelectedValue();
        String userFolder = System.getProperty("user.home");

        File image = new File(userFolder + "\\AppData\\Local\\UserList2\\images\\User" + selectedUser.getId() + ".jpg");

        users.remove(selectedUser);
        deletedUsers.add(image);
        UpdateUsersListView();
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        try {
            User selectedUser = lstUsers.getSelectedValue();
            if (selectedUser != null) {
                int userId = selectedUser.getId();
                for (User u : users) {
                    if (u.getId() == userId) {
                        u.setFirstName(txtFirstName.getText());
                        u.setLastName(txtLastName.getText());
                        LocalDate birthDate = LocalDate.parse(txtBirthDate.getText(), DateTimeFormatter.ofPattern("yyyy-MM-dd"));
                        u.setbirthDate(birthDate);
                        u.setProfile(imagePath);
                        if (radMale.isSelected()) {
                            u.setGenre("Male");
                        }
                        if (radFemale.isSelected()) {
                            u.setGenre("Female");
                        }
                        if (radOther.isSelected()) {
                            u.setGenre(txtOther.getText());
                        }
                        if (chkAlive.isSelected()) {
                            u.setLifeStatus("Alive");
                        } else {
                            u.setLifeStatus("Dead");
                        }
                    }
                }
            }
            UpdateUsersListView();
        } catch (NumberFormatException nfe) {

        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        confirmExit();
    }//GEN-LAST:event_formWindowClosing

    private void txtIdKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtIdKeyReleased
        btnInsert.setEnabled(true);
        btnUpdate.setEnabled(true);
        btnSave.setEnabled(true);
        String id = txtId.getText();
        if (!id.isEmpty() || !id.isBlank() || !id.equals("")) {
            for (int i = 0; i < users.size(); i++) {
                if (users.get(i).getId() == Integer.parseInt(id)) {
                    btnInsert.setEnabled(false);
                    break;
                } else {
                    btnInsert.setEnabled(true);
                }
            }
        }
    }//GEN-LAST:event_txtIdKeyReleased

    private void mniCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniCreateActionPerformed
        btnInsert.doClick();
    }//GEN-LAST:event_mniCreateActionPerformed

    private void mniReadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniReadActionPerformed
        btnLoadList.doClick();
    }//GEN-LAST:event_mniReadActionPerformed

    private void mniUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniUpdateActionPerformed
        btnUpdate.doClick();
    }//GEN-LAST:event_mniUpdateActionPerformed

    private void mniDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniDeleteActionPerformed
        btnDelete.doClick();
    }//GEN-LAST:event_mniDeleteActionPerformed

    private void mniExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniExitActionPerformed
        confirmExit();
    }//GEN-LAST:event_mniExitActionPerformed

    private void btnImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImageActionPerformed
        fileChooser = new JFileChooser();

        int returnOption = fileChooser.showOpenDialog(this);
        if (returnOption == JFileChooser.APPROVE_OPTION) {
            imagePath = fileChooser.getSelectedFile().getAbsolutePath();
        } else {
            imagePath = "src/spdvi/image/guest.png";
        }

        try {
            BufferedImage selectedImage = ImageIO.read(new File(imagePath));
            lblImage.setIcon(resizImageIcon(selectedImage));
        } catch (IOException ioe) {
            System.err.println("Error en btnImageActionPerformed");
            System.err.println(ioe);
        }
    }//GEN-LAST:event_btnImageActionPerformed

    public void findAllFilesInFolder(File folder) {
        for (File file : folder.listFiles()) {
            for (File f : deletedUsers) {
                if (file.getName().equals(f.getName())) {
                    f.delete();
                }
            }
        }
    }

    private ImageIcon resizImageIcon(BufferedImage originalImage) {

        int desiredHeight = 0;
        int desiredWidth = 0;
        float aspectRatio = (float) originalImage.getWidth() / originalImage.getHeight();
        if (originalImage.getWidth() < originalImage.getHeight()) {
            desiredWidth = Math.round(lblImage.getHeight() * aspectRatio);
            desiredHeight = lblImage.getHeight();
        } else {
            desiredHeight = Math.round(lblImage.getWidth() / aspectRatio);
            desiredWidth = lblImage.getWidth();
        }

        Image resultingImage = originalImage.getScaledInstance(desiredWidth, desiredHeight, Image.SCALE_SMOOTH);
        BufferedImage outputImage = new BufferedImage(desiredWidth, desiredHeight, BufferedImage.TYPE_INT_RGB);
        outputImage.getGraphics().drawImage(resultingImage, 0, 0, null);

        ImageIcon icon = new ImageIcon(outputImage);
        return icon;
    }

    void exiting() {
        ExitForm e = new ExitForm(this, true);
        e.setVisible(true);

        switch (e.action) {
            case 0 -> {
                return;
            }

            case 1 -> {
                exiting = true;
                btnSave.doClick();
                System.exit(0);
            }

            case 2 ->
                System.exit(0);

            default -> {
            }
        }
    }

    private void confirmExit() {
        try {
            if (filename.exists()) {
                br = new BufferedReader(new FileReader(filename));
                User u;
                ArrayList<User> diff = new ArrayList<>();
                while (br.ready()) {
                    String line = br.readLine();
                    String[] lines = line.split(",");

                    LocalDate birthDate = LocalDate.parse(lines[3], DateTimeFormatter.ofPattern("yyyy-MM-dd"));

                    u = new User(Integer.parseInt(lines[0]), lines[2], lines[1], birthDate, lines[4], lines[5], lines[6]);

                    diff.add(u);
                }

                if (diff.size() != users.size()) {
                    exiting();
                } else {
                    for (int i = 0; i < users.size(); i++) {
                        if (!diff.get(i).toFile().equals(users.get(i).toFile())) {
                            if(diff.get(i).getProfile().equals(users.get(i).getProfile()))
                                exiting();
                        }
                    }
                    System.exit(0);
                }
            } else {
                System.exit(0);
            }

        } catch (IOException ioe) {
            ioe.printStackTrace();
        }
    }

    private void loadUsers() {
        try {
            String userFolder = System.getProperty("user.home");
            FileReader fr = new FileReader(filename);
            String text = "";
            while (fr.ready()) {
                char c = (char) fr.read();
                text += c;
            }
            fr.close();

            String[] arr = text.split(System.lineSeparator());
            String[] lines;
            User user;

            for (int i = 0; i < arr.length; i++) {
                lines = arr[i].split(",");

                user = new User(Integer.parseInt(lines[0]), lines[1], lines[2],
                        LocalDate.parse(lines[3], DateTimeFormatter.ofPattern("yyyy-MM-dd")),
                        lines[4], lines[5], userFolder + "\\AppData\\Local\\UserList2\\images\\" + lines[6]);
                users.add(user);
            }

        } catch (FileNotFoundException fnfe) {
            System.err.println("Se ha producido un error en la creación del archivo");
        } catch (EOFException eofe) {

        } catch (IOException ioe) {
            System.err.println("Se ha producido un error en la lectura del archivo");
        }
    }

    private void UpdateUsersListView() {
        DefaultListModel<User> usersListModel = new DefaultListModel<User>();
        for (User u : users) {
            usersListModel.addElement(u);
        }
        lstUsers.setModel(usersListModel);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDelete;
    private javax.swing.ButtonGroup btnGGenre;
    private javax.swing.JButton btnImage;
    private javax.swing.JButton btnInsert;
    private javax.swing.JButton btnLoadList;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JCheckBox chkAlive;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblBirthDate;
    private javax.swing.JLabel lblFirstName;
    private javax.swing.JLabel lblId;
    private javax.swing.JLabel lblImage;
    private javax.swing.JLabel lblLastName;
    private javax.swing.JMenuItem mniCreate;
    private javax.swing.JMenuItem mniDelete;
    private javax.swing.JMenuItem mniExit;
    private javax.swing.JMenuItem mniRead;
    private javax.swing.JMenuItem mniUpdate;
    private javax.swing.JMenuBar mnuBar;
    private javax.swing.JMenu mnuCRUD;
    private javax.swing.JRadioButton radFemale;
    private javax.swing.JRadioButton radMale;
    private javax.swing.JRadioButton radOther;
    private javax.swing.JTextField txtBirthDate;
    private javax.swing.JTextField txtFirstName;
    private javax.swing.JTextField txtId;
    private javax.swing.JTextField txtLastName;
    private javax.swing.JTextField txtOther;
    // End of variables declaration//GEN-END:variables
}
